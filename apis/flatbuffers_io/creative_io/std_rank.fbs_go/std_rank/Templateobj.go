// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package std_rank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Templateobj struct {
	_tab flatbuffers.Table
}

func GetRootAsTemplateobj(buf []byte, offset flatbuffers.UOffsetT) *Templateobj {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Templateobj{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTemplateobj(buf []byte, offset flatbuffers.UOffsetT) *Templateobj {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Templateobj{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Templateobj) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Templateobj) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Templateobj) Templateid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Templateobj) MutateTemplateid(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Templateobj) Creativespec() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Templateobj) Templatetype() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Templateobj) MutateTemplatetype(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Templateobj) Componenttype() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Templateobj) MutateComponenttype(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Templateobj) Groupcreativelist(obj *GroupCreative, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Templateobj) GroupcreativelistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Templateobj) Elementlist(obj *TemplateElement, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Templateobj) ElementlistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TemplateobjStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func TemplateobjAddTemplateid(builder *flatbuffers.Builder, templateid int32) {
	builder.PrependInt32Slot(0, templateid, 0)
}
func TemplateobjAddCreativespec(builder *flatbuffers.Builder, creativespec flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(creativespec), 0)
}
func TemplateobjAddTemplatetype(builder *flatbuffers.Builder, templatetype int32) {
	builder.PrependInt32Slot(2, templatetype, 0)
}
func TemplateobjAddComponenttype(builder *flatbuffers.Builder, componenttype int32) {
	builder.PrependInt32Slot(3, componenttype, 0)
}
func TemplateobjAddGroupcreativelist(builder *flatbuffers.Builder, groupcreativelist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(groupcreativelist), 0)
}
func TemplateobjStartGroupcreativelistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TemplateobjAddElementlist(builder *flatbuffers.Builder, elementlist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(elementlist), 0)
}
func TemplateobjStartElementlistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TemplateobjEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

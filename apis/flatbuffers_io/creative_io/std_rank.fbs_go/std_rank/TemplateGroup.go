// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package std_rank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TemplateGroup struct {
	_tab flatbuffers.Table
}

func GetRootAsTemplateGroup(buf []byte, offset flatbuffers.UOffsetT) *TemplateGroup {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TemplateGroup{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTemplateGroup(buf []byte, offset flatbuffers.UOffsetT) *TemplateGroup {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TemplateGroup{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TemplateGroup) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TemplateGroup) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TemplateGroup) Templategroupid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TemplateGroup) MutateTemplategroupid(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *TemplateGroup) Templateidtuple(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *TemplateGroup) TemplateidtupleLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TemplateGroup) MutateTemplateidtuple(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *TemplateGroup) Trynewgroup() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TemplateGroup) MutateTrynewgroup(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func TemplateGroupStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TemplateGroupAddTemplategroupid(builder *flatbuffers.Builder, templategroupid int32) {
	builder.PrependInt32Slot(0, templategroupid, 0)
}
func TemplateGroupAddTemplateidtuple(builder *flatbuffers.Builder, templateidtuple flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(templateidtuple), 0)
}
func TemplateGroupStartTemplateidtupleVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TemplateGroupAddTrynewgroup(builder *flatbuffers.Builder, trynewgroup bool) {
	builder.PrependBoolSlot(2, trynewgroup, false)
}
func TemplateGroupEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

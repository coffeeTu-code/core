// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package std_rank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TemplateElementResult struct {
	_tab flatbuffers.Table
}

func GetRootAsTemplateElementResult(buf []byte, offset flatbuffers.UOffsetT) *TemplateElementResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TemplateElementResult{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTemplateElementResult(buf []byte, offset flatbuffers.UOffsetT) *TemplateElementResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TemplateElementResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TemplateElementResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TemplateElementResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TemplateElementResult) Elementname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TemplateElementResult) Creativeid() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TemplateElementResult) MutateCreativeid(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func TemplateElementResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TemplateElementResultAddElementname(builder *flatbuffers.Builder, elementname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(elementname), 0)
}
func TemplateElementResultAddCreativeid(builder *flatbuffers.Builder, creativeid int64) {
	builder.PrependInt64Slot(1, creativeid, 0)
}
func TemplateElementResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

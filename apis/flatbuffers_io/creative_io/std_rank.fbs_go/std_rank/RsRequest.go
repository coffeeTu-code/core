// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package std_rank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RsRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsRsRequest(buf []byte, offset flatbuffers.UOffsetT) *RsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RsRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRsRequest(buf []byte, offset flatbuffers.UOffsetT) *RsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RsRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RsRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RsRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RsRequest) Timeout() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RsRequest) MutateTimeout(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *RsRequest) Requestid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RsRequest) Traffic(obj *Traffic) *Traffic {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Traffic)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RsRequest) Dev(obj *Device) *Device {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Device)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RsRequest) Campaigndetaillist(obj *Campaign, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RsRequest) CampaigndetaillistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RsRequest) Bigtemplatelist(obj *BigTemplate, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RsRequest) BigtemplatelistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RsRequest) Slotlist(obj *Slotobj, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RsRequest) SlotlistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RsRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func RsRequestAddTimeout(builder *flatbuffers.Builder, timeout int32) {
	builder.PrependInt32Slot(0, timeout, 0)
}
func RsRequestAddRequestid(builder *flatbuffers.Builder, requestid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(requestid), 0)
}
func RsRequestAddTraffic(builder *flatbuffers.Builder, traffic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(traffic), 0)
}
func RsRequestAddDev(builder *flatbuffers.Builder, dev flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(dev), 0)
}
func RsRequestAddCampaigndetaillist(builder *flatbuffers.Builder, campaigndetaillist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(campaigndetaillist), 0)
}
func RsRequestStartCampaigndetaillistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RsRequestAddBigtemplatelist(builder *flatbuffers.Builder, bigtemplatelist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(bigtemplatelist), 0)
}
func RsRequestStartBigtemplatelistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RsRequestAddSlotlist(builder *flatbuffers.Builder, slotlist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(slotlist), 0)
}
func RsRequestStartSlotlistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RsRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

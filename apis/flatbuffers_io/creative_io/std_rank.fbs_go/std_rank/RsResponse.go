// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package std_rank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RsResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsRsResponse(buf []byte, offset flatbuffers.UOffsetT) *RsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RsResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRsResponse(buf []byte, offset flatbuffers.UOffsetT) *RsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RsResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RsResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RsResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RsResponse) Statuscode() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RsResponse) MutateStatuscode(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *RsResponse) Statusmsg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RsResponse) Bigtemplateid() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RsResponse) MutateBigtemplateid(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *RsResponse) Bidresult(obj *BidCampaign, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RsResponse) BidresultLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RsResponse) Algorithm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RsResponse) Subalgorithm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RsResponse) Bidprice() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *RsResponse) MutateBidprice(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *RsResponse) Extalgo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func RsResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func RsResponseAddStatuscode(builder *flatbuffers.Builder, statuscode int32) {
	builder.PrependInt32Slot(0, statuscode, 0)
}
func RsResponseAddStatusmsg(builder *flatbuffers.Builder, statusmsg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(statusmsg), 0)
}
func RsResponseAddBigtemplateid(builder *flatbuffers.Builder, bigtemplateid int64) {
	builder.PrependInt64Slot(2, bigtemplateid, 0)
}
func RsResponseAddBidresult(builder *flatbuffers.Builder, bidresult flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(bidresult), 0)
}
func RsResponseStartBidresultVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RsResponseAddAlgorithm(builder *flatbuffers.Builder, algorithm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(algorithm), 0)
}
func RsResponseAddSubalgorithm(builder *flatbuffers.Builder, subalgorithm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(subalgorithm), 0)
}
func RsResponseAddBidprice(builder *flatbuffers.Builder, bidprice float32) {
	builder.PrependFloat32Slot(6, bidprice, 0.0)
}
func RsResponseAddExtalgo(builder *flatbuffers.Builder, extalgo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(extalgo), 0)
}
func RsResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package std_rank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BidCampaign struct {
	_tab flatbuffers.Table
}

func GetRootAsBidCampaign(buf []byte, offset flatbuffers.UOffsetT) *BidCampaign {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BidCampaign{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBidCampaign(buf []byte, offset flatbuffers.UOffsetT) *BidCampaign {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BidCampaign{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BidCampaign) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BidCampaign) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BidCampaign) Slotindex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BidCampaign) MutateSlotindex(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *BidCampaign) Slotid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BidCampaign) MutateSlotid(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *BidCampaign) Campaignid() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BidCampaign) MutateCampaignid(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *BidCampaign) Templategroupid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BidCampaign) MutateTemplategroupid(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *BidCampaign) Templateresult(obj *TemplateResult, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *BidCampaign) TemplateresultLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func BidCampaignStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func BidCampaignAddSlotindex(builder *flatbuffers.Builder, slotindex int32) {
	builder.PrependInt32Slot(0, slotindex, 0)
}
func BidCampaignAddSlotid(builder *flatbuffers.Builder, slotid int32) {
	builder.PrependInt32Slot(1, slotid, 0)
}
func BidCampaignAddCampaignid(builder *flatbuffers.Builder, campaignid int64) {
	builder.PrependInt64Slot(2, campaignid, 0)
}
func BidCampaignAddTemplategroupid(builder *flatbuffers.Builder, templategroupid int32) {
	builder.PrependInt32Slot(3, templategroupid, 0)
}
func BidCampaignAddTemplateresult(builder *flatbuffers.Builder, templateresult flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(templateresult), 0)
}
func BidCampaignStartTemplateresultVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BidCampaignEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

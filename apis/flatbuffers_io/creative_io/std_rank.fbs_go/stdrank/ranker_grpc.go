//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: std_rank

package stdrank

import (
	context "context"
	flatbuffers "github.com/google/flatbuffers/go"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Client API for Ranker service
type RankerClient interface {
	Predict(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*rsresponse, error)
}

type rankerClient struct {
	cc grpc.ClientConnInterface
}

func NewRankerClient(cc grpc.ClientConnInterface) RankerClient {
	return &rankerClient{cc}
}

func (c *rankerClient) Predict(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*rsresponse, error) {
	out := new(rsresponse)
	err := c.cc.Invoke(ctx, "/stdrank.Ranker/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ranker service
type RankerServer interface {
	Predict(context.Context, *rsrequest) (*flatbuffers.Builder, error)
	mustEmbedUnimplementedRankerServer()
}

type UnimplementedRankerServer struct {
}

func (UnimplementedRankerServer) Predict(context.Context, *rsrequest) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}

func (UnimplementedRankerServer) mustEmbedUnimplementedRankerServer() {}

type UnsafeRankerServer interface {
	mustEmbedUnimplementedRankerServer()
}

func RegisterRankerServer(s grpc.ServiceRegistrar, srv RankerServer) {
	s.RegisterService(&_Ranker_serviceDesc, srv)
}

func _Ranker_Predict_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rsrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stdrank.Ranker/Predict",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).Predict(ctx, req.(*rsrequest))
	}
	return interceptor(ctx, in, info, handler)
}
var _Ranker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stdrank.Ranker",
	HandlerType: (*RankerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Ranker_Predict_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
	},
}

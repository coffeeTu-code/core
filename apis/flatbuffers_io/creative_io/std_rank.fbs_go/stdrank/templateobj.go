// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package stdrank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type templateobj struct {
	_tab flatbuffers.Table
}

func GetRootAstemplateobj(buf []byte, offset flatbuffers.UOffsetT) *templateobj {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &templateobj{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAstemplateobj(buf []byte, offset flatbuffers.UOffsetT) *templateobj {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &templateobj{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *templateobj) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *templateobj) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *templateobj) TemplateId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateobj) MutateTemplateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *templateobj) TemplateType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateobj) MutateTemplateType(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *templateobj) ComponentType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateobj) MutateComponentType(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *templateobj) ApiFramework() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateobj) MutateApiFramework(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *templateobj) Order() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateobj) MutateOrder(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *templateobj) Orientation() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateobj) MutateOrientation(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *templateobj) TemplateScreenSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateobj) MutateTemplateScreenSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *templateobj) ClickArea(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *templateobj) ClickAreaLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *templateobj) MutateClickArea(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *templateobj) ElementList(obj *templateelement, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *templateobj) ElementListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *templateobj) CreativeSpec() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *templateobj) GroupCreativeList(obj *groupcreative, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *templateobj) GroupCreativeListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *templateobj) TemplateFeatureIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *templateobj) TemplateFeatureIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func templateobjStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func templateobjAddTemplateId(builder *flatbuffers.Builder, templateId int32) {
	builder.PrependInt32Slot(0, templateId, 0)
}
func templateobjAddTemplateType(builder *flatbuffers.Builder, templateType int32) {
	builder.PrependInt32Slot(1, templateType, 0)
}
func templateobjAddComponentType(builder *flatbuffers.Builder, componentType int32) {
	builder.PrependInt32Slot(2, componentType, 0)
}
func templateobjAddApiFramework(builder *flatbuffers.Builder, apiFramework int32) {
	builder.PrependInt32Slot(3, apiFramework, 0)
}
func templateobjAddOrder(builder *flatbuffers.Builder, order int32) {
	builder.PrependInt32Slot(4, order, 0)
}
func templateobjAddOrientation(builder *flatbuffers.Builder, orientation int32) {
	builder.PrependInt32Slot(5, orientation, 0)
}
func templateobjAddTemplateScreenSize(builder *flatbuffers.Builder, templateScreenSize int32) {
	builder.PrependInt32Slot(6, templateScreenSize, 0)
}
func templateobjAddClickArea(builder *flatbuffers.Builder, clickArea flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(clickArea), 0)
}
func templateobjStartClickAreaVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func templateobjAddElementList(builder *flatbuffers.Builder, elementList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(elementList), 0)
}
func templateobjStartElementListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func templateobjAddCreativeSpec(builder *flatbuffers.Builder, creativeSpec flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(creativeSpec), 0)
}
func templateobjAddGroupCreativeList(builder *flatbuffers.Builder, groupCreativeList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(groupCreativeList), 0)
}
func templateobjStartGroupCreativeListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func templateobjAddTemplateFeatureIds(builder *flatbuffers.Builder, templateFeatureIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(templateFeatureIds), 0)
}
func templateobjStartTemplateFeatureIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func templateobjEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

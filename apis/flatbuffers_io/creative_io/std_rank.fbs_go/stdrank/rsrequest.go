// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package stdrank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type rsrequest struct {
	_tab flatbuffers.Table
}

func GetRootAsrsrequest(buf []byte, offset flatbuffers.UOffsetT) *rsrequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &rsrequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsrsrequest(buf []byte, offset flatbuffers.UOffsetT) *rsrequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &rsrequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *rsrequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *rsrequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *rsrequest) Timeout() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *rsrequest) MutateTimeout(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *rsrequest) Requestid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *rsrequest) Dateinfo(obj *dateinfo) *dateinfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(dateinfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *rsrequest) Traffic(obj *traffic) *traffic {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(traffic)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *rsrequest) Dev(obj *device) *device {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(device)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *rsrequest) Polarisresponse(obj *polarisresponse) *polarisresponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(polarisresponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func rsrequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func rsrequestAddTimeout(builder *flatbuffers.Builder, timeout int32) {
	builder.PrependInt32Slot(0, timeout, 0)
}
func rsrequestAddRequestid(builder *flatbuffers.Builder, requestid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(requestid), 0)
}
func rsrequestAddDateinfo(builder *flatbuffers.Builder, dateinfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dateinfo), 0)
}
func rsrequestAddTraffic(builder *flatbuffers.Builder, traffic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(traffic), 0)
}
func rsrequestAddDev(builder *flatbuffers.Builder, dev flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dev), 0)
}
func rsrequestAddPolarisresponse(builder *flatbuffers.Builder, polarisresponse flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(polarisresponse), 0)
}
func rsrequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package stdrank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type campaigntemplate struct {
	_tab flatbuffers.Table
}

func GetRootAscampaigntemplate(buf []byte, offset flatbuffers.UOffsetT) *campaigntemplate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &campaigntemplate{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAscampaigntemplate(buf []byte, offset flatbuffers.UOffsetT) *campaigntemplate {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &campaigntemplate{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *campaigntemplate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *campaigntemplate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *campaigntemplate) CampaignId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *campaigntemplate) MutateCampaignId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *campaigntemplate) TemplateGroupList(obj *templatetypegroupinstance, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *campaigntemplate) TemplateGroupListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *campaigntemplate) TemplateList(obj *templateobj, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *campaigntemplate) TemplateListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *campaigntemplate) CreativeList(obj *creativeattr, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *campaigntemplate) CreativeListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *campaigntemplate) Ext(obj *respcampaignext) *respcampaignext {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(respcampaignext)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func campaigntemplateStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func campaigntemplateAddCampaignId(builder *flatbuffers.Builder, campaignId int64) {
	builder.PrependInt64Slot(0, campaignId, 0)
}
func campaigntemplateAddTemplateGroupList(builder *flatbuffers.Builder, templateGroupList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(templateGroupList), 0)
}
func campaigntemplateStartTemplateGroupListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func campaigntemplateAddTemplateList(builder *flatbuffers.Builder, templateList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(templateList), 0)
}
func campaigntemplateStartTemplateListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func campaigntemplateAddCreativeList(builder *flatbuffers.Builder, creativeList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(creativeList), 0)
}
func campaigntemplateStartCreativeListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func campaigntemplateAddExt(builder *flatbuffers.Builder, ext flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(ext), 0)
}
func campaigntemplateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

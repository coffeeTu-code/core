// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package stdrank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type elementcreative struct {
	_tab flatbuffers.Table
}

func GetRootAselementcreative(buf []byte, offset flatbuffers.UOffsetT) *elementcreative {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &elementcreative{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAselementcreative(buf []byte, offset flatbuffers.UOffsetT) *elementcreative {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &elementcreative{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *elementcreative) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *elementcreative) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *elementcreative) CreativeType() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *elementcreative) MutateCreativeType(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *elementcreative) CreativeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *elementcreative) MutateCreativeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *elementcreative) DocId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *elementcreative) AdnCreativeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *elementcreative) MutateAdnCreativeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *elementcreative) FormatType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *elementcreative) MutateFormatType(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *elementcreative) TrynewCreative() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *elementcreative) MutateTrynewCreative(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func elementcreativeStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func elementcreativeAddCreativeType(builder *flatbuffers.Builder, creativeType int64) {
	builder.PrependInt64Slot(0, creativeType, 0)
}
func elementcreativeAddCreativeId(builder *flatbuffers.Builder, creativeId int64) {
	builder.PrependInt64Slot(1, creativeId, 0)
}
func elementcreativeAddDocId(builder *flatbuffers.Builder, docId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(docId), 0)
}
func elementcreativeAddAdnCreativeId(builder *flatbuffers.Builder, adnCreativeId int64) {
	builder.PrependInt64Slot(3, adnCreativeId, 0)
}
func elementcreativeAddFormatType(builder *flatbuffers.Builder, formatType int32) {
	builder.PrependInt32Slot(4, formatType, 0)
}
func elementcreativeAddTrynewCreative(builder *flatbuffers.Builder, trynewCreative bool) {
	builder.PrependBoolSlot(5, trynewCreative, false)
}
func elementcreativeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

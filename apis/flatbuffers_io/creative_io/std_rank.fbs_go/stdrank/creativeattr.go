// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package stdrank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type creativeattr struct {
	_tab flatbuffers.Table
}

func GetRootAscreativeattr(buf []byte, offset flatbuffers.UOffsetT) *creativeattr {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &creativeattr{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAscreativeattr(buf []byte, offset flatbuffers.UOffsetT) *creativeattr {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &creativeattr{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *creativeattr) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *creativeattr) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *creativeattr) CreativeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateCreativeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *creativeattr) SubCreativeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateSubCreativeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *creativeattr) Resolution() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) VideoResolution() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) VideoLength() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) Width() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateWidth(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *creativeattr) Height() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateHeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *creativeattr) Bitrate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateBitrate(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *creativeattr) VideoSize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) Orientation() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateOrientation(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *creativeattr) Minos() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateMinos(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *creativeattr) Platform() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutatePlatform(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func (rcv *creativeattr) Fmd5() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) Source() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateSource(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func (rcv *creativeattr) Ctime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateCtime(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *creativeattr) Utime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateUtime(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func (rcv *creativeattr) CpId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateCpId(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

func (rcv *creativeattr) DcoPartList(obj *dcopart, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *creativeattr) DcoPartListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *creativeattr) CreativePackageType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateCreativePackageType(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

func (rcv *creativeattr) AdvCreativeGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateAdvCreativeGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(42, n)
}

func (rcv *creativeattr) AbtestTupleId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateAbtestTupleId(n int64) bool {
	return rcv._tab.MutateInt64Slot(44, n)
}

func (rcv *creativeattr) UniqCid() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateUniqCid(n int64) bool {
	return rcv._tab.MutateInt64Slot(46, n)
}

func (rcv *creativeattr) AdvCreativeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) Whdcoid() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateWhdcoid(n int64) bool {
	return rcv._tab.MutateInt64Slot(50, n)
}

func (rcv *creativeattr) Dimenssiontype() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateDimenssiontype(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

func (rcv *creativeattr) Url() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) AppTag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) Mime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) CreativeType() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateCreativeType(n int64) bool {
	return rcv._tab.MutateInt64Slot(60, n)
}

func (rcv *creativeattr) Clarity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *creativeattr) MutateClarity(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

func (rcv *creativeattr) Tagcode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *creativeattr) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func creativeattrStart(builder *flatbuffers.Builder) {
	builder.StartObject(32)
}
func creativeattrAddCreativeId(builder *flatbuffers.Builder, creativeId int64) {
	builder.PrependInt64Slot(0, creativeId, 0)
}
func creativeattrAddSubCreativeId(builder *flatbuffers.Builder, subCreativeId int64) {
	builder.PrependInt64Slot(1, subCreativeId, 0)
}
func creativeattrAddResolution(builder *flatbuffers.Builder, resolution flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(resolution), 0)
}
func creativeattrAddVideoResolution(builder *flatbuffers.Builder, videoResolution flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(videoResolution), 0)
}
func creativeattrAddVideoLength(builder *flatbuffers.Builder, videoLength flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(videoLength), 0)
}
func creativeattrAddWidth(builder *flatbuffers.Builder, width int32) {
	builder.PrependInt32Slot(5, width, 0)
}
func creativeattrAddHeight(builder *flatbuffers.Builder, height int32) {
	builder.PrependInt32Slot(6, height, 0)
}
func creativeattrAddBitrate(builder *flatbuffers.Builder, bitrate int32) {
	builder.PrependInt32Slot(7, bitrate, 0)
}
func creativeattrAddVideoSize(builder *flatbuffers.Builder, videoSize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(videoSize), 0)
}
func creativeattrAddOrientation(builder *flatbuffers.Builder, orientation int32) {
	builder.PrependInt32Slot(9, orientation, 0)
}
func creativeattrAddMinos(builder *flatbuffers.Builder, minos int64) {
	builder.PrependInt64Slot(10, minos, 0)
}
func creativeattrAddPlatform(builder *flatbuffers.Builder, platform int32) {
	builder.PrependInt32Slot(11, platform, 0)
}
func creativeattrAddFmd5(builder *flatbuffers.Builder, fmd5 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(fmd5), 0)
}
func creativeattrAddSource(builder *flatbuffers.Builder, source int32) {
	builder.PrependInt32Slot(13, source, 0)
}
func creativeattrAddCtime(builder *flatbuffers.Builder, ctime int64) {
	builder.PrependInt64Slot(14, ctime, 0)
}
func creativeattrAddUtime(builder *flatbuffers.Builder, utime int64) {
	builder.PrependInt64Slot(15, utime, 0)
}
func creativeattrAddCpId(builder *flatbuffers.Builder, cpId int64) {
	builder.PrependInt64Slot(16, cpId, 0)
}
func creativeattrAddDcoPartList(builder *flatbuffers.Builder, dcoPartList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(dcoPartList), 0)
}
func creativeattrStartDcoPartListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func creativeattrAddCreativePackageType(builder *flatbuffers.Builder, creativePackageType int32) {
	builder.PrependInt32Slot(18, creativePackageType, 0)
}
func creativeattrAddAdvCreativeGroupId(builder *flatbuffers.Builder, advCreativeGroupId int64) {
	builder.PrependInt64Slot(19, advCreativeGroupId, 0)
}
func creativeattrAddAbtestTupleId(builder *flatbuffers.Builder, abtestTupleId int64) {
	builder.PrependInt64Slot(20, abtestTupleId, 0)
}
func creativeattrAddUniqCid(builder *flatbuffers.Builder, uniqCid int64) {
	builder.PrependInt64Slot(21, uniqCid, 0)
}
func creativeattrAddAdvCreativeId(builder *flatbuffers.Builder, advCreativeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(advCreativeId), 0)
}
func creativeattrAddWhdcoid(builder *flatbuffers.Builder, whdcoid int64) {
	builder.PrependInt64Slot(23, whdcoid, 0)
}
func creativeattrAddDimenssiontype(builder *flatbuffers.Builder, dimenssiontype int32) {
	builder.PrependInt32Slot(24, dimenssiontype, 0)
}
func creativeattrAddUrl(builder *flatbuffers.Builder, url flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(url), 0)
}
func creativeattrAddAppTag(builder *flatbuffers.Builder, appTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(appTag), 0)
}
func creativeattrAddMime(builder *flatbuffers.Builder, mime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(mime), 0)
}
func creativeattrAddCreativeType(builder *flatbuffers.Builder, creativeType int64) {
	builder.PrependInt64Slot(28, creativeType, 0)
}
func creativeattrAddClarity(builder *flatbuffers.Builder, clarity int32) {
	builder.PrependInt32Slot(29, clarity, 0)
}
func creativeattrAddTagcode(builder *flatbuffers.Builder, tagcode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(tagcode), 0)
}
func creativeattrAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(value), 0)
}
func creativeattrEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

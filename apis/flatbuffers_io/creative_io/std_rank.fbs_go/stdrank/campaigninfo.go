// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package stdrank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type campaigninfo struct {
	_tab flatbuffers.Table
}

func GetRootAscampaigninfo(buf []byte, offset flatbuffers.UOffsetT) *campaigninfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &campaigninfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAscampaigninfo(buf []byte, offset flatbuffers.UOffsetT) *campaigninfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &campaigninfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *campaigninfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *campaigninfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *campaigninfo) Slotindex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *campaigninfo) MutateSlotindex(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *campaigninfo) Slotid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *campaigninfo) MutateSlotid(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *campaigninfo) Campaignid() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *campaigninfo) MutateCampaignid(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *campaigninfo) Templategroupid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *campaigninfo) MutateTemplategroupid(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *campaigninfo) Templateresult(obj *templateresult, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *campaigninfo) TemplateresultLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *campaigninfo) Predictedactionrate() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *campaigninfo) MutatePredictedactionrate(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *campaigninfo) Predictedecpm() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *campaigninfo) MutatePredictedecpm(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *campaigninfo) Bidfactor() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *campaigninfo) MutateBidfactor(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *campaigninfo) Subalgorithm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func campaigninfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func campaigninfoAddSlotindex(builder *flatbuffers.Builder, slotindex int32) {
	builder.PrependInt32Slot(0, slotindex, 0)
}
func campaigninfoAddSlotid(builder *flatbuffers.Builder, slotid int32) {
	builder.PrependInt32Slot(1, slotid, 0)
}
func campaigninfoAddCampaignid(builder *flatbuffers.Builder, campaignid int64) {
	builder.PrependInt64Slot(2, campaignid, 0)
}
func campaigninfoAddTemplategroupid(builder *flatbuffers.Builder, templategroupid int32) {
	builder.PrependInt32Slot(3, templategroupid, 0)
}
func campaigninfoAddTemplateresult(builder *flatbuffers.Builder, templateresult flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(templateresult), 0)
}
func campaigninfoStartTemplateresultVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func campaigninfoAddPredictedactionrate(builder *flatbuffers.Builder, predictedactionrate float32) {
	builder.PrependFloat32Slot(5, predictedactionrate, 0.0)
}
func campaigninfoAddPredictedecpm(builder *flatbuffers.Builder, predictedecpm float32) {
	builder.PrependFloat32Slot(6, predictedecpm, 0.0)
}
func campaigninfoAddBidfactor(builder *flatbuffers.Builder, bidfactor float32) {
	builder.PrependFloat32Slot(7, bidfactor, 0.0)
}
func campaigninfoAddSubalgorithm(builder *flatbuffers.Builder, subalgorithm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(subalgorithm), 0)
}
func campaigninfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

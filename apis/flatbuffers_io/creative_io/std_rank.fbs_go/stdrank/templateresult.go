// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package stdrank

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type templateresult struct {
	_tab flatbuffers.Table
}

func GetRootAstemplateresult(buf []byte, offset flatbuffers.UOffsetT) *templateresult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &templateresult{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAstemplateresult(buf []byte, offset flatbuffers.UOffsetT) *templateresult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &templateresult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *templateresult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *templateresult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *templateresult) Templateid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateresult) MutateTemplateid(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *templateresult) Groupid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *templateresult) Templatedetail(obj *templatedetail, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *templateresult) TemplatedetailLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *templateresult) Templatetype() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateresult) MutateTemplatetype(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *templateresult) Componenttype() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateresult) MutateComponenttype(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *templateresult) Order() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateresult) MutateOrder(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *templateresult) Apiframework() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *templateresult) MutateApiframework(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func templateresultStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func templateresultAddTemplateid(builder *flatbuffers.Builder, templateid int32) {
	builder.PrependInt32Slot(0, templateid, 0)
}
func templateresultAddGroupid(builder *flatbuffers.Builder, groupid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(groupid), 0)
}
func templateresultAddTemplatedetail(builder *flatbuffers.Builder, templatedetail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(templatedetail), 0)
}
func templateresultStartTemplatedetailVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func templateresultAddTemplatetype(builder *flatbuffers.Builder, templatetype int32) {
	builder.PrependInt32Slot(3, templatetype, 0)
}
func templateresultAddComponenttype(builder *flatbuffers.Builder, componenttype int32) {
	builder.PrependInt32Slot(4, componenttype, 0)
}
func templateresultAddOrder(builder *flatbuffers.Builder, order int32) {
	builder.PrependInt32Slot(5, order, 0)
}
func templateresultAddApiframework(builder *flatbuffers.Builder, apiframework int32) {
	builder.PrependInt32Slot(6, apiframework, 0)
}
func templateresultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Creative

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CreativeId struct {
	_tab flatbuffers.Table
}

func GetRootAsCreativeId(buf []byte, offset flatbuffers.UOffsetT) *CreativeId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CreativeId{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCreativeId(buf []byte, offset flatbuffers.UOffsetT) *CreativeId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CreativeId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CreativeId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CreativeId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CreativeId) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CreativeId) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CreativeId) Clarity() Clarity {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Clarity(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CreativeId) MutateClarity(n Clarity) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func CreativeIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CreativeIdAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func CreativeIdAddClarity(builder *flatbuffers.Builder, clarity Clarity) {
	builder.PrependInt8Slot(1, int8(clarity), 0)
}
func CreativeIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

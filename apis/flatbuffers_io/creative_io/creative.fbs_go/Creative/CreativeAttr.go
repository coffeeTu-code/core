// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Creative

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CreativeAttr struct {
	_tab flatbuffers.Table
}

func GetRootAsCreativeAttr(buf []byte, offset flatbuffers.UOffsetT) *CreativeAttr {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CreativeAttr{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCreativeAttr(buf []byte, offset flatbuffers.UOffsetT) *CreativeAttr {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CreativeAttr{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CreativeAttr) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CreativeAttr) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CreativeAttr) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CreativeAttr) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CreativeAttr) Rule(obj *CreativeRule) *CreativeRule {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CreativeRule)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func CreativeAttrStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CreativeAttrAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func CreativeAttrAddRule(builder *flatbuffers.Builder, rule flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rule), 0)
}
func CreativeAttrEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

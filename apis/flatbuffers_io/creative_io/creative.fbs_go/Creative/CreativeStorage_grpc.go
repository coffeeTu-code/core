//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: creative

package Creative

import (
	context "context"
	flatbuffers "github.com/google/flatbuffers/go"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Client API for CreativeStorage service
type CreativeStorageClient interface {
	Store(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*Cmd, error)
	Retrieve(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*CreativeAttr, error)
}

type creativeStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewCreativeStorageClient(cc grpc.ClientConnInterface) CreativeStorageClient {
	return &creativeStorageClient{cc}
}

func (c *creativeStorageClient) Store(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*Cmd, error) {
	out := new(Cmd)
	err := c.cc.Invoke(ctx, "/Creative.CreativeStorage/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creativeStorageClient) Retrieve(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*CreativeAttr, error) {
	out := new(CreativeAttr)
	err := c.cc.Invoke(ctx, "/Creative.CreativeStorage/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CreativeStorage service
type CreativeStorageServer interface {
	Store(context.Context, *CreativeAttr) (*flatbuffers.Builder, error)
	Retrieve(context.Context, *CreativeId) (*flatbuffers.Builder, error)
	mustEmbedUnimplementedCreativeStorageServer()
}

type UnimplementedCreativeStorageServer struct {
}

func (UnimplementedCreativeStorageServer) Store(context.Context, *CreativeAttr) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}

func (UnimplementedCreativeStorageServer) Retrieve(context.Context, *CreativeId) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}

func (UnimplementedCreativeStorageServer) mustEmbedUnimplementedCreativeStorageServer() {}

type UnsafeCreativeStorageServer interface {
	mustEmbedUnimplementedCreativeStorageServer()
}

func RegisterCreativeStorageServer(s grpc.ServiceRegistrar, srv CreativeStorageServer) {
	s.RegisterService(&_CreativeStorage_serviceDesc, srv)
}

func _CreativeStorage_Store_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreativeAttr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreativeStorageServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Creative.CreativeStorage/Store",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreativeStorageServer).Store(ctx, req.(*CreativeAttr))
	}
	return interceptor(ctx, in, info, handler)
}
func _CreativeStorage_Retrieve_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreativeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreativeStorageServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Creative.CreativeStorage/Retrieve",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreativeStorageServer).Retrieve(ctx, req.(*CreativeId))
	}
	return interceptor(ctx, in, info, handler)
}
var _CreativeStorage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Creative.CreativeStorage",
	HandlerType: (*CreativeStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _CreativeStorage_Store_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CreativeStorage_Retrieve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
	},
}
